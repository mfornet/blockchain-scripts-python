"""
Simple borsh implementation similar to implementation in solidity.
"""

data = bytes.fromhex("")


def check_good(inner):
    def func(self):
        res = inner(self)
        assert(self.pnt <= len(self.data))
        return res
    return func


class BorshView:
    def __init__(self, data):
        self.data = data
        self.pnt = 0

    def done(self):
        return self.pnt == len(self.data)

    @check_good
    def decodeU8(self):
        value = self.data[self.pnt:self.pnt + 1]
        self.pnt += 1
        return int(bytes(reversed(value)).hex(), 16)

    @check_good
    def decodeU32(self):
        value = self.data[self.pnt:self.pnt + 4]
        self.pnt += 4
        return int(bytes(reversed(value)).hex(), 16)

    @check_good
    def decodeU128(self):
        value = self.data[self.pnt:self.pnt + 16]
        self.pnt += 16
        return int(bytes(reversed(value)).hex(), 16)

    @check_good
    def decodeBytes32(self):
        value = self.data[self.pnt:self.pnt + 32]
        self.pnt += 32
        return value

    @check_good
    def skip(self):
        length = self.decodeU32()
        self.pnt += length

    @check_good
    def decodePK(self):
        assert self.decodeU8() == 0
        return self.decodeBytes32()

    @check_good
    def decodeBlockProducer(self):
        self.skip()
        pk = self.decodePK()
        stake = self.decodeU128()
        return pk, stake


data = BorshView(data)

total = data.decodeU32()
for i in range(total):
    (pk, stake) = data.decodeBlockProducer()
    print(i, pk.hex(), stake)

assert data.done()
